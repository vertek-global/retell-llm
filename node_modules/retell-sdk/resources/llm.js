"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Llm = void 0;
const resource_1 = require("../resource.js");
const core_1 = require("../core.js");
class Llm extends resource_1.APIResource {
    /**
     * Create a new Retell LLM Response Engine that can be attached to an agent. This
     * is used to generate response output for the agent.
     *
     * @example
     * ```ts
     * const llmResponse = await client.llm.create();
     * ```
     */
    create(body, options) {
        return this._client.post('/create-retell-llm', { body, ...options });
    }
    retrieve(llmId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.retrieve(llmId, {}, query);
        }
        return this._client.get(`/get-retell-llm/${llmId}`, { query, ...options });
    }
    /**
     * Update an existing Retell LLM Response Engine
     *
     * @example
     * ```ts
     * const llmResponse = await client.llm.update(
     *   '16b980523634a6dc504898cda492e939',
     *   {
     *     begin_message:
     *       'Hey I am a virtual assistant calling from Retell Hospital.',
     *   },
     * );
     * ```
     */
    update(llmId, params, options) {
        const { query_version, ...body } = params;
        return this._client.patch(`/update-retell-llm/${llmId}`, {
            query: { version: query_version },
            body,
            ...options,
        });
    }
    /**
     * List all Retell LLM Response Engines that can be attached to an agent.
     *
     * @example
     * ```ts
     * const llmResponses = await client.llm.list();
     * ```
     */
    list(options) {
        return this._client.get('/list-retell-llms', options);
    }
    /**
     * Delete an existing Retell LLM Response Engine
     *
     * @example
     * ```ts
     * await client.llm.delete('oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD');
     * ```
     */
    delete(llmId, options) {
        return this._client.delete(`/delete-retell-llm/${llmId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
}
exports.Llm = Llm;
//# sourceMappingURL=llm.js.map