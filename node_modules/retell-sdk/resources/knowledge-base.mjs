// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../resource.mjs";
import * as Core from "../core.mjs";
export class KnowledgeBase extends APIResource {
    /**
     * Create a new knowledge base
     *
     * @example
     * ```ts
     * const knowledgeBaseResponse =
     *   await client.knowledgeBase.create({
     *     knowledge_base_name: 'Sample KB',
     *   });
     * ```
     */
    create(body, options) {
        return this._client.post('/create-knowledge-base', Core.multipartFormRequestOptions({ body, ...options }));
    }
    /**
     * Retrieve details of a specific knowledge base
     *
     * @example
     * ```ts
     * const knowledgeBaseResponse =
     *   await client.knowledgeBase.retrieve('kb_1234567890');
     * ```
     */
    retrieve(knowledgeBaseId, options) {
        return this._client.get(`/get-knowledge-base/${knowledgeBaseId}`, options);
    }
    /**
     * List all knowledge bases
     *
     * @example
     * ```ts
     * const knowledgeBaseResponses =
     *   await client.knowledgeBase.list();
     * ```
     */
    list(options) {
        return this._client.get('/list-knowledge-bases', options);
    }
    /**
     * Delete an existing knowledge base
     *
     * @example
     * ```ts
     * await client.knowledgeBase.delete('kb_1234567890');
     * ```
     */
    delete(knowledgeBaseId, options) {
        return this._client.delete(`/delete-knowledge-base/${knowledgeBaseId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    /**
     * Add sources to a knowledge base
     *
     * @example
     * ```ts
     * const knowledgeBaseResponse =
     *   await client.knowledgeBase.addSources('kb_1234567890');
     * ```
     */
    addSources(knowledgeBaseId, body, options) {
        return this._client.post(`/add-knowledge-base-sources/${knowledgeBaseId}`, Core.multipartFormRequestOptions({ body, ...options }));
    }
    /**
     * Delete an existing source from knowledge base
     *
     * @example
     * ```ts
     * const knowledgeBaseResponse =
     *   await client.knowledgeBase.deleteSource(
     *     'kb_1234567890',
     *     'source_1234567890',
     *   );
     * ```
     */
    deleteSource(knowledgeBaseId, sourceId, options) {
        return this._client.delete(`/delete-knowledge-base-source/${knowledgeBaseId}/source/${sourceId}`, options);
    }
}
//# sourceMappingURL=knowledge-base.mjs.map